= render partial: 'layouts/breadcrumb',
  locals: {wid: nil, exid: nil, off: @course_offering}
%p#notice= notice

%p
  %strong Course:
  = link_to @course_offering.course.number_and_name, @url

%p
  %strong Term:
  = @course_offering.term.display_name

%p
  %strong Label:
  = @course_offering.label

%p
  %strong Instructor(s):
  - @course_offering.instructors.each do |instructor|
    = link_to instructor.display_name, user_path(instructor)

-# = link_to 'foo'
-#Tutorial: https://www.tutorialspoint.com/jqueryui/jqueryui_autocomplete
-#API: http://api.jqueryui.com/autocomplete/
-#demo: https://jqueryui.com/autocomplete/#combobox
-#So, your work will touch the following action
-#course_offerings#show
-#and the follow view
-#course_offering/view
-#and here is the new route
-#get '/course_offerings/:id' => 'course_offerings#show', as: :show_course_offerings

-# my code 
!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %meta{:content => "width=device-width, initial-scale=1", :name => "viewport"}/
    %title jQuery UI Autocomplete - Combobox
    %link{:href => "//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css", :rel => "stylesheet"}/
    %link{:href => "/resources/demos/style.css", :rel => "stylesheet"}/
    :css
       .myButton {
        -moz-box-shadow: 3px 4px 0px 0px #899599;
        -webkit-box-shadow: 3px 4px 0px 0px #899599;
        box-shadow: 3px 4px 0px 0px #899599;
        background-color:#ededed;
        -moz-border-radius:15px;
        -webkit-border-radius:15px;
        border-radius:15px;
        border:1px solid #d6bcd6;
        display:inline-block;
        cursor:pointer;
        color:#040404;
        font-family:Arial;
        font-size:17px;
        font-weight:bold;
        padding:2px 33px;
        text-decoration:none;
        text-shadow:0px 0px 0px #e1e2ed;
      }
      .myButton:hover {
       background-color:#bab1ba;
      }
      .myButton:active {
        position:relative;
        top:1px;
      }
      .custom-combobox {
        position: relative;
        display: inline-block;
      }
      .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
      }
      .ui-autocomplete {
        max-height: 300px;
        overflow-y: auto;   /* prevent horizontal scrollbar */
        overflow-x: hidden; /* add padding to account for vertical scrollbar */
        z-index:1000 !important;
      }
      .custom-combobox-input {
        margin: 0;
        padding: 5px 10px;
      }
      .custom-comb {
        position: relative;
        display: inline-block;
      }
      .custom-comb-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
      }
      .custom-comb-input {
        margin: 0;
        padding: 5px 10px;
      }
    %script{:src => "https://code.jquery.com/jquery-1.12.4.js"}
    %script{:src => "https://code.jquery.com/ui/1.12.1/jquery-ui.js"}
    :javascript
      $( function() {
        $.widget( "custom.combobox", {
          _create: function() {
            this.wrapper = $( "<span>" )
              .addClass( "custom-combobox" )
              .addClass( "custom-comb" )
              .insertAfter( this.element );

      this.element.hide();
      this._createAutocomplete();
      this._createShowAllButton();
      },

      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";

        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .addClass( "custom-comb-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });

        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },

          autocompletechange: "_removeIfInvalid"
        });
      },

      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;

        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .addClass( "custom-comb-toggle ui-corner-right" )
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .on( "click", function() {
            input.trigger( "focus" );

                // Close if already visible
            if ( wasOpen ) {
              return;
            }

                // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },

      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
      },

      _removeIfInvalid: function( event, ui ) {

            // Selected an item, nothing to do
        if ( ui.item ) {
          return;
        }

            // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });

            // Found a match, nothing to do
        if ( valid ) {
          return;
        }

            // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },

      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
      });

      $( "#combobox" ).combobox();
      $( "#toggle" ).on( "click", function() {
        $( "#combobox" ).toggle();
      });
      $( "#comb" ).combobox();
      $( "#toggle" ).on( "click", function() {
        $( "#comb" ).toggle();
      });
      } );
  %body
    .ui-widget
      %strong Select Student:
      %select#combobox{:size => "10"}
        - @student_list.each do |q|
          - q.each do |y|
            %option{:value => y.id}
              #{y.first_name} #{y.last_name}

      %strong ___    Select Assignment:
      %select#comb{:size => "10"}
        - @exercise_list.each do |k, q|
          %option{:value => k}
            #{q}
      %p
      %button#display.btn.btn-primary Display
      %p
        %br/
      #log

