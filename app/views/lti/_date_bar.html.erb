<!DOCTYPE html>
<html>
<head>
  <title>Launch Page</title>
  <!-- Include Bootstrap CSS (assuming Bootstrap is used based on the HAML code) -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <!-- Include jQuery and Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script>
    // Access TP object
    var TP = window.ODSA.TP;
    
    document.addEventListener('DOMContentLoaded', function() {
      var countdownElement = document.getElementById("countdown-timer");

      var now = new Date().getTime();
      var openDate = new Date(countdownElement.getAttribute("open-date")).getTime();
      var dueDate = new Date(countdownElement.getAttribute("due-date")).getTime();
      var closeDate = new Date(countdownElement.getAttribute("close-date")).getTime();

      function updateCountdown() {
      now = new Date().getTime();

      if (now < openDate) {
        var distance = openDate - now;

        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        countdownElement.innerHTML = "Assignment Opens In:  <b>" + days + "d " + hours + "h " + minutes + "m " + seconds + "s </b>";

      } else if (now < dueDate) {
        var distance = dueDate - now;

        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        countdownElement.innerHTML = "Due in: <b>" + days + "d " + hours + "h " + minutes + "m " + seconds + "s </b>";

      } else if (now < closeDate) {
        showTokenOptionsButton()

        var distance = closeDate - now;

        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        var dueDateReadable = new Date(countdownElement.getAttribute("due-date")).toLocaleString();
        countdownElement.innerHTML = "Due Date Has Passed: " + dueDateReadable + "<br>Assignment Closes In: <b>" + days + "d " + hours + "h " + minutes + "m " + seconds + "s </b>";
      
      } else {
        countdownElement.innerHTML = "Assignment Closed";
      }
      }

      updateCountdown();
      setInterval(updateCountdown, 1000);
    });

    function showTokenOptionsButton() {
      var button = document.getElementById("token-menu-button");
      button.classList.remove("hidden");
    }

    function toggleTokensModal() {
      // Show the modal
      $('#tokens-modal').modal('show');
      
      // Fetch tokens when modal is opened
      fetch('/epg_broker/tokens/get_tokens')
        .then(response => response.json())
        .then(data => {          
          const tokensContainer = document.getElementById('tokens-container');
          
          if (data.status === "success" && data.data.length > 0) {
            // Create HTML for tokens
            const tokensHtml = data.data.map(token => `
              <div class="row" style="margin-bottom: 10px;">
                <div class="col-xs-8">
                  <p>${token.name}</p>
                  <small class="text-muted">${token.description}</small>
                </div>
                <div class="col-xs-4 text-right">
                  <button type="button" 
                          class="btn btn-primary" 
                          onclick="useToken('${token.id}')">
                    Use (${token.count} left)
                  </button>
                </div>
              </div>
            `).join('');
            
            tokensContainer.innerHTML = tokensHtml;
          } else {
            tokensContainer.innerHTML = '<p class="text-center">No tokens available</p>';
          }
        })
        .catch(error => {
          console.error('Error fetching tokens:', error);
          document.getElementById('tokens-container').innerHTML = 
            '<p class="text-center text-danger">Error loading tokens</p>';
        });
    }

  function useToken(tokenId) {
    var TP = window.ODSA.TP;

    if (confirm('Are you sure you want to use this token?')) {
      fetch('https://opendsa-lti.localhost.devcom.vt.edu/epg_broker/tokens/redeem_token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ 
          token_id: tokenId, 
          inst_chapter_module_id: TP.instChapterModuleId, 
          user_id: TP.toParams.launch_params.user_id
        })
        
      })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        if (data.status === "success") {
          alert('Token used successfully!');
          $('#tokens-modal').modal('hide');
          // Optionally refresh the page or update the deadline display
          location.reload();
        } else {
          alert('Error: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error using token:', error);
        alert('Error using token. Please try again.');
      });
      
      location.reload();

    }
  }  
  // Examples of accessing TP properties:
  if (TP.outcomeService) {
    // Handle outcome service case
    console.log(TP.exerciseName);
    console.log(TP.instBookSectionExerciseId);
  }

  // Access module info if available
  if (TP.moduleTitle) {
    console.log(TP.moduleTitle);
    console.log(TP.instModuleId);
  }

  // Access launch parameters
  console.log(TP.toParams.launch_params);

  </script>
</head>
<body>

  <nav class="navbar navbar-default">
    <div class="container-fluid">
      <div 
        class="navbar-text navbar-left" 
        id="countdown-timer" 
        due-date=<%= @due_date %>
        open-date=<%= @open_date %>
        close-date=<%= @close_date %>
      >

      </div>

      <button 
        class="btn btn-primary navbar-btn navbar-right hidden" 
        id="token-menu-button"
        onclick="toggleTokensModal()"
      >
        My Late Tokens
      </button>

    </div>
</nav>

<div id="tokens-modal" class="modal fade" role="dialog">
  <div class="modal-dialog modal-md">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">My Late Tokens</h4>
      </div>
      <div class="modal-body" id="tokens-container">
        <!-- Tokens will be loaded here dynamically -->
        <div class="loading text-center">
          <i class="fa fa-spinner fa-spin"></i> Loading tokens...
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

</body>
</html>


