.. This file is part of the OpenDSA eTextbook project. See
.. http://algoviz.org/OpenDSA for more details.
.. Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and
.. distributed under an MIT open source license.

.. avmetadata::
   :author: Cliff Shaffer

.. slideconf::
   :autoslides: False

================
Project 2 Design
================

Project 2 Design
----------------

.. slide:: Project 2 Design (1)

   | Conceptually simpler than Project 1
   |    "All" that you need to do is implement the quadtree.
   |    The only other data structure is the list of rectangles stored
        in a leaf node.
   |    Probably a bit harder to implement than Project 1 (delete is
        pretty hard). Good news: P3/P4 should be easier for you than
        P1 and P2!

.. slide:: Project 2 Design (2)
           
   | Good class design: Keep separate classes for:
   |    Project main
   |    Syntactic parser
   |    Semantic command processing
   |    Quadtree (this is a class hierarchy)
   |    Rectangle
   |    Rectangle list
   |    (I have 10 class files plus JUnit test files)
           

.. slide:: Spatial Data Structures

   | Fundamental idea: Need to treat X and Y dimensions as co-equal.
   |    This requires different thinking from 1-dimensional key
        structures like BST or Hash Table
   | Support spatial queries: Regionsearch, intersections


.. slide:: Rectangle Quadtree

   | Many quadtree variants and similar spatial data structures
   |   PR quadtrees, k-d trees, and bintrees are common for storing
       point data
   | But any 2D data can be stored in a quadtree (or 3D data in
     octree)
   | Decomposition rule: The rule that decides when to split the
     tree
   |    Our rule: Up to 3 rectangles
   |    BUT: Splitting is useless if the rectangles all overlap
   |    So we don't split when they all overlap

.. slide:: Implementation

  | The world is 1024 units on each side (0..1023)
  |    I define the origin as the upper left corner of the world square
  |    The initial world is an empty box
  
  | Different types of nodes:
  |   Internal (has 4 children)
  |   Leaf with rectangles
  |   Leaf that is empty

  
.. slide:: Tree/Node Implementation (1)

  | Class hierarchy
  |   Base node type: Could be an interface
  |   Internal nodes have 4 child pointers (no rectangles)
  |   Leaf nodes have no child pointers, store rectangles

  | How to implement empty nodes? There are a lot of them.
  |    Definitely NOT as a null pointer!!
  |    Avoid space concerns by implementing a Flyweight design pattern
  |    Leaf can be a separate class, or not
  |    Either way, it is a Singleton design pattern.


.. slide:: Tree/Node Implementation (2)

  | Tree initializes as an empty leaf node.
  | NO node stores its world box coordinates (pass them in)
  | All major tree methods (insert, remove, search, intersections) are
    implemented recursively.
  | NO use of parent pointers!

  | Composite design is natural here
           
